### Test status code 200 on GET api/products/ - Getting all products
GET http://localhost:8080/api/products

> {%
client.test("Request status is 200", function() {
  client.assert(response.status === 200, `The Status Code expected is 200 but the Status Code retrieved is ${response.status}`);
});

client.test("Number of products is different from 0", () => {
  client.assert(response.body.products.length !== 0, `Products found: ${response.body.products.length}`);
});
%}

### Test status code 200 on GET api/products/ - Getting an specific product by id
GET http://localhost:8080/api/products/1

> {%
client.test("Request status is 200", function() {
  client.assert(response.status === 200, `The Status Code expected is 200 but the Status Code retrieved is ${response.status}`);
});

client.test("First element is Iphone 10", () => {
  client.assert(response.body.product.title === 'Iphone 10', `The title is not Iphone 10, but ${response.body.product.title}`);
  client.assert(response.body.product.price === 1000.1, `The price for Iphone 10 found is of ${response.body.product.price}`);
  client.assert(response.body.product.thumbnail === 'www.example.com', `The URL found was of ${response.body.product.thumbnail}`);
});
%}

### Test status code 400 on GET api/products/ - Using something different from a number on the url
GET http://localhost:8080/api/products/asd

> {%
client.test("Request status is 400", function() {
  client.assert(response.status === 400, `The Status Code expected is 400 but the Status Code retrieved is ${response.status}`);
});

client.test("Checking Error messages is the correct one", () => {
   client.assert(response.body.error === "The ID is not a number, bad request.", "The error messages is not the expected.");
});
%}

### Test status code 201 on POST api/products/ - Creating new product
POST http://localhost:8080/api/products
Content-Type: application/json

{
  "name": "Kaneki Figure",
  "price": 1200,
  "category": "figures",
  "img": "https://qph.fs.quoracdn.net/main-qimg-9ec57820b0ecb331f2bc18b32baac7e0",
  "colors": ["blue", "red", "green"],
  "minimumStock": 1,
  "rating": 4.6,
  "reviews": 10,
  "stars": 5,
  "stock": 3,
  "description": "Ken Kaneki (金木 研かねき けん, Kaneki Ken?) es el protagonista principal de la serie Tokyo Ghoul y Tokyo Ghoul:re.  Anteriormente era un estudiante de literatura japonesa en la Universidad Kamii. Su vida cambio radicalmente después de tener un encuentro con un Ghoul del cual le transplantaron un riñon y otros órganos digestivos convirtiéndole en un Ghoul de un Ojo. Después de una serie de eventos, decide unirse a Anteiku como camarero de tiempo parcial, mientras trata de vivir una vida como un humano. Es nombrado por el CCG cómo Ojo Parchado (眼帯, Gantai?)."
}

> {%
client.test("Request status is 201", function() {
  client.assert(response.status === 201, `The Status Code expected is 201 but the Status Code retrieved is ${response.status}`);
});

// client.test("Checking the products was created", () => {
//   client.assert(response.body.products.title === 'Asus 2080', `The title is not Asus 2080, but ${response.body.products.title}`);
//   client.assert(response.body.products.price === 900, `The price for Asus 2080 found is of ${response.body.products.price}`);
//   client.assert(response.body.products.thumbnail === 'www.example.com', `The URL found was of ${response.body.products.thumbnail}`);
// });
%}

### Test status code 400 on POST api/products/ - Sending wrong body
POST http://localhost:8080/api/products
Content-Type: application/json

{
  "name": "Resident Evil 2",
  "price": 850,
  "category": "games",
  "img": "https://qph.fs.quoracdn.net/main-qimg-9ec57820b0ecb331f2bc18b32baac7e0",
  "colors": ["blue", "red", "green"],
  "minimumStock": 1,
  "rating": 4.5
}

> {%
client.test("Request status is 400", function() {
  client.assert(response.status === 400, `The Status Code expected is 400 but the Status Code retrieved is ${response.status}`);
});

client.test("Checking Error messages is the correct one", () => {
   client.assert(response.body.error === "The information sent is not correct, please check you are sending the right information.");
});
%}

### Test status code 200 on PUT api/products/ - Updating existent product with id 3
PUT http://localhost:8080/api/products/3
Content-Type: application/json

{
  "name": "Dr Stone Manga",
  "price": 450,
  "category": "mangas",
  "img": "https://elmundodeshirohome.files.wordpress.com/2020/08/el-manga-dr.-stone-revela-la-portada-de-su-volumen-17.jpg",
  "colors": ["blue", "red", "green"],
  "minimumStock": 1,
  "rating": 4.9,
  "reviews": 255,
  "stars": 5,
  "stock": 19,
  "description": "Dr. Stone (ドクターストーン Dokutā Sutōn?), estilizado como Dr. STONE, es un manga de ficción post-apocalíptico escrito por Riichiro Inagaki (escritor de Eyeshield 21) e ilustrado por Boichi (autor de Sun-Ken Rock). La historia cuenta las aventuras de Senku y Taiju, dos adolescentes que se ven atrapados en un mundo post-apocalíptico en el que la raza humana se ha convertido en piedra y ellos buscan la manera de revertir la petrificación en la mayor cantidad de personas posibles, para así reconstruir la sociedad tal como la conocieron.  El manga que está publicándose desde el 6 de marzo de 2017 en las páginas de la revista Shūkan Shōnen Jump actualmente está recopilado en veintiuno Tankōbon hasta junio de 2021. La Editorial Ivrea ha licenciado el manga en España y se ha hecho la serie de anime con estreno de julio de 2019."
}

> {%
client.test("Request status is 200", function() {
  client.assert(response.status === 200, `The Status Code expected is 200 but the Status Code retrieved is ${response.status}`);
});

// client.test("Checking the products was updated", () => {
//   client.assert(response.body.products.title === 'Iphone 11 Pro Max', `The title is not Iphone 11 Pro Max, but ${response.body.products.title}`);
//   client.assert(response.body.products.price === 2100, `The price for Iphone 11 Pro Max found is of ${response.body.products.price}`);
//   client.assert(response.body.products.thumbnail === 'www.example.com', `The URL found was of ${response.body.products.thumbnail}`);
// });
%}

### Test status code 400 on PUT api/products/ - Wrong body on update
PUT http://localhost:8080/api/products/3
Content-Type: application/json

{
  "title": "Iphone 11 Pro Max",
  "price": 2100
}

> {%
client.test("Request status is 400", function() {
  client.assert(response.status === 400, `The Status Code expected is 400 but the Status Code retrieved is ${response.status}`);
});

client.test("Checking Error messages is the correct one", () => {
   client.assert(response.body.error === "The information sent is not correct, please check you are sending the right information.");
});
%}

### Test status code 400 on PUT api/products/ - Incorrect format ID but correct body
PUT http://localhost:8080/api/products/asd
Content-Type: application/json

{
  "title": "Iphone 11 Pro Max",
  "price": 2100,
  "thumbnail": "www.example.com"
}

> {%
client.test("Request status is 400", function() {
  client.assert(response.status === 400, `The Status Code expected is 400 but the Status Code retrieved is ${response.status}`);
});

client.test("Checking Error messages is the correct one", () => {
   client.assert(response.body.error === "The ID is not a number, bad request.");
});
%}

### Test status code 500 on PUT api/products/ - There is no product with the ID provided
PUT http://localhost:8080/api/products/1123
Content-Type: application/json

{
  "title": "Iphone 12 Pro Max",
  "price": 1900,
  "thumbnail": "www.example.com"
}

> {%
client.test("Request status is 500", function() {
  client.assert(response.status === 500, `The Status Code expected is 500 but the Status Code retrieved is ${response.status}`);
});

client.test("Checking Error messages is the correct one", () => {
   client.assert(response.body.error === "The products with Id: 1123 does not exist in the container.");
});
%}

### Test status code 200 on DELETE api/products/ - Deleting product
DELETE http://localhost:8080/api/products/7

> {%
client.test("Request status is 200", function() {
  client.assert(response.status === 200, `The Status Code expected is 200 but the Status Code retrieved is ${response.status}`);
});

client.test("Request status is 200", function() {
  client.assert(response.body.productDeleted.id === 7, `The product deleted was incorrect, please check the id.`);
});
%}

### Test status code 400 on DELETE api/products/ - Sending an incorrect format ID
DELETE http://localhost:8080/api/products/asd

> {%
client.test("Request status is 400", function() {
  client.assert(response.status === 400, `The Status Code expected is 400 but the Status Code retrieved is ${response.status}`);
});

client.test("Checking Error messages is the correct one", () => {
   client.assert(response.body.error === "The ID is not a number, bad request.");
});
%}

### Test status code 500 on DELETE api/products/ - Deleting an inexistent product
DELETE http://localhost:8080/api/products/1238

> {%
client.test("Request status is 500", function() {
  client.assert(response.status === 500, `The Status Code expected is 500 but the Status Code retrieved is ${response.status}`);
});

client.test("Checking Error messages is the correct one", () => {
   client.assert(response.body.error === "The products with Id: 1238 does not exist in the container.");
});
%}